"""
–ü–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ json_generator.py
"""
import sys
from pathlib import Path

def patch_json_generator():
    """
    –ü–∞—Ç—á–∏—Ç json_generator.py –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    file_path = Path(r'F:\AiKlientBank\Lir\src\generators\json_generator.py')
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if 'self._create_exercise_html(' in content:
        print("[SKIP] –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ generate_lesson")
        return False
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    # –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ generate_lesson –ø–µ—Ä–µ–¥ return html
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ü–∞ generate_lesson
    import re
    
    # –ù–∞–π–¥–µ–º –º–µ—Ç–æ–¥ generate_lesson
    pattern = r'(def generate_lesson\(.*?\n(?:.*?\n)*?)(        return html)'
    match = re.search(pattern, content, re.MULTILINE | re.DOTALL)
    
    if not match:
        print("[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ generate_lesson")
        return False
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥ return html
    insertion_code = '''
        # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        exercise_data = data.get('exercise')
        if exercise_data:
            html += self._create_exercise_html(exercise_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –í–°–ï–ì–î–ê
        html += \'\'\'
        <!-- –ù–ê–í–Ü–ì–ê–¶–Ü–Ø –í–ù–ò–ó–£ –°–¢–û–†–Ü–ù–ö–ò -->
        <div class="bottom-navigation" style="
            margin-top: 50px;
            padding: 30px 0;
            display: flex;
            justify-content: center;
            gap: 20px;
            border-top: 2px solid #e2e8f0;
            background: white;
        ">
            <a href="../index.html" class="nav-btn" style="
                display: inline-flex;
                align-items: center;
                gap: 10px;
                padding: 15px 30px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-decoration: none;
                border-radius: 25px;
                font-size: 1.1em;
                font-weight: 600;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(118, 75, 162, 0.3);
            " onmouseover="this.style.transform=\'translateY(-2px)\'" 
              onmouseout="this.style.transform=\'translateY(0)\'">
                <span style="font-size: 1.3em;">üìö</span>
                <span>–ö —É—Ä–æ–∫–∞–º</span>
            </a>
            <a href="../../index.html" class="nav-btn nav-btn-home" style="
                display: inline-flex;
                align-items: center;
                gap: 10px;
                padding: 15px 30px;
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                color: white;
                text-decoration: none;
                border-radius: 25px;
                font-size: 1.1em;
                font-weight: 600;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(245, 87, 108, 0.3);
            " onmouseover="this.style.transform=\'translateY(-2px)\'"
              onmouseout="this.style.transform=\'translateY(0)\'">
                <span style="font-size: 1.3em;">üè†</span>
                <span>–ù–∞ –≥–ª–∞–≤–Ω—É—é</span>
            </a>
        </div>\'\'\'
        
'''
    
    # –ó–∞–º–µ–Ω—è–µ–º
    new_content = content.replace(
        match.group(2), 
        insertion_code + match.group(2)
    )
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º JavaScript –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    js_code = '''
        <script>
        function toggleAnswers(button) {
            const blanks = document.querySelectorAll('.blank');
            const isShowing = button.textContent.includes('–°–∫—Ä—ã—Ç—å');
            
            if (isShowing) {
                // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                blanks.forEach(blank => {
                    blank.classList.remove('filled');
                    const hint = blank.getAttribute('data-hint');
                    blank.textContent = `_______ (${hint})`;
                });
                button.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã';
                button.classList.remove('success');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                const exerciseSection = button.closest('.exercise-section');
                const exerciseData = exerciseSection.dataset.answers;
                
                if (exerciseData) {
                    const answers = JSON.parse(exerciseData);
                    blanks.forEach(blank => {
                        const hint = blank.getAttribute('data-hint');
                        if (answers[hint]) {
                            blank.classList.add('filled');
                            blank.textContent = answers[hint];
                        }
                    });
                }
                
                button.textContent = '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã';
                button.classList.add('success');
            }
        }
        </script>
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </body>
    if 'toggleAnswers' not in new_content:
        new_content = new_content.replace('</body>', js_code + '\n</body>')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("[OK] json_generator.py –æ–±–Ω–æ–≤–ª–µ–Ω!")
    print("[+] –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    print("[+] –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
    print("[+] –î–æ–±–∞–≤–ª–µ–Ω JavaScript –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
    return True

if __name__ == "__main__":
    patch_json_generator()
