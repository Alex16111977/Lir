"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º Lir
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ story –∏ dialogues
"""
import json
import re
from pathlib import Path
import random

def extract_german_words_from_story(story_data):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–µ–º–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    –ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∏–¥–∞: **—Å–ª–æ–≤–æ** –∏–ª–∏ <strong>—Å–ª–æ–≤–æ</strong>
    """
    words_found = {}
    
    narrative = story_data.get('narrative', '')
    if not narrative:
        return words_found
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    patterns = [
        r'\*\*([^*]+)\*\*',  # **—Å–ª–æ–≤–æ**
        r'<strong>([^<]+)</strong>',  # <strong>—Å–ª–æ–≤–æ</strong>
        r'<b>([^<]+)</b>',  # <b>—Å–ª–æ–≤–æ</b>
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, narrative)
        for match in matches:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–µ–º–µ—Ü–∫–æ–µ –∏ —Ä—É—Å—Å–∫–æ–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏
            if '(' in match and ')' in match:
                parts = match.split('(')
                german = parts[0].strip()
                russian = parts[1].replace(')', '').strip()
                words_found[russian] = german
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ —Å–ª–æ–≤–æ –∫–∞–∫ –∫–ª—é—á
                words_found[match.lower()] = match
    
    return words_found

def extract_words_from_vocabulary(vocabulary):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞
    """
    words_dict = {}
    
    for word_data in vocabulary:
        german = word_data.get('german', '')
        translation = word_data.get('translation', '')
        
        if german and translation:
            # –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫–ª–∏ –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤ –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
            clean_german = german
            if word_data.get('type') == '–≥–ª–∞–≥–æ–ª':
                clean_german = german
            elif word_data.get('type') == '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ':
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
                clean_german = german
            
            words_dict[translation.lower()] = clean_german
    
    return words_dict

def create_exercise_from_dialogues(dialogues, vocab_words):
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
    """
    if not dialogues:
        return None
    
    exercise_lines = []
    answers = {}
    
    for dialogue in dialogues[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–∏–∞–ª–æ–≥–∞
        character = dialogue.get('character', '–ü–µ—Ä—Å–æ–Ω–∞–∂')
        russian = dialogue.get('russian', '')
        
        if not russian:
            continue
        
        # –ò—â–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
        words_replaced = 0
        modified_text = russian
        
        for rus_word, ger_word in vocab_words.items():
            if rus_word in russian.lower() and words_replaced < 2:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–ø—É—Å–∫
                placeholder = f"___ ({rus_word})"
                # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                pattern = re.compile(re.escape(rus_word), re.IGNORECASE)
                if pattern.search(modified_text):
                    modified_text = pattern.sub(placeholder, modified_text, count=1)
                    answers[rus_word] = ger_word
                    words_replaced += 1
        
        if words_replaced > 0:
            exercise_lines.append(f"{character}: ¬´{modified_text}¬ª")
    
    if not exercise_lines:
        return None
    
    return {
        "text": " ".join(exercise_lines),
        "answers": answers
    }

def create_exercise_from_story(story_data, vocab_words):
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    """
    narrative = story_data.get('narrative', '')
    if not narrative:
        return None
    
    # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    sentences = narrative.split('.')
    selected_sentences = sentences[:5]  # –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    exercise_text = '. '.join(selected_sentences) + '.'
    answers = {}
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
    words_to_replace = list(vocab_words.items())[:8]  # –ú–∞–∫—Å–∏–º—É–º 8 –ø—Ä–æ–ø—É—Å–∫–æ–≤
    
    for rus_word, ger_word in words_to_replace:
        if rus_word in exercise_text.lower():
            placeholder = f"___ ({rus_word})"
            pattern = re.compile(re.escape(rus_word), re.IGNORECASE)
            if pattern.search(exercise_text):
                exercise_text = pattern.sub(placeholder, exercise_text, count=1)
                answers[rus_word] = ger_word
    
    if not answers:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ª—é–±—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for i, (rus_word, ger_word) in enumerate(words_to_replace[:5]):
            placeholder = f"___ ({rus_word})"
            exercise_text = exercise_text[:50*i] + placeholder + exercise_text[50*i+len(rus_word):]
            answers[rus_word] = ger_word
    
    return {
        "text": exercise_text,
        "answers": answers
    }

def process_json_file(json_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω JSON —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    """
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    vocabulary = data.get('vocabulary', [])
    vocab_words = extract_words_from_vocabulary(vocabulary)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    story = data.get('story', {})
    story_words = extract_german_words_from_story(story)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞
    all_words = {**vocab_words, **story_words}
    
    if not all_words:
        print(f"  [SKIP] –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    exercise = None
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
    dialogues = data.get('dialogues', [])
    if dialogues:
        exercise = create_exercise_from_dialogues(dialogues, all_words)
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    if not exercise and story:
        exercise = create_exercise_from_story(story, all_words)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ JSON
    if exercise:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = data.get('title', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–æ–º–µ—Ä –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        clean_title = re.sub(r'üìö\s*–°–¶–ï–ù–ê\s*\d+:\s*', '', title)
        
        data['exercise'] = {
            'title': f"–£–ü–†–ê–ñ–ù–ï–ù–ò–ï: {clean_title}",
            'text': exercise['text'],
            'answers': exercise['answers']
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"  [OK] –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å {len(exercise['answers'])} –ø—Ä–æ–ø—É—Å–∫–∞–º–∏")
        return True
    else:
        print(f"  [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return False

def main():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ Lir
    """
    print("=" * 60)
    print("–î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –í –ü–†–û–ï–ö–¢ LIR")
    print("=" * 60)
    
    base_dir = Path(r'F:\AiKlientBank\Lir\data')
    categories = ['a2', 'b1', 'thematic']
    
    total_processed = 0
    total_exercises = 0
    
    for category in categories:
        cat_dir = base_dir / category
        if not cat_dir.exists():
            print(f"\n[SKIP] –ü–∞–ø–∫–∞ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        print(f"\n[CATEGORY] {category.upper()}")
        print("-" * 40)
        
        json_files = sorted(cat_dir.glob("*.json"))
        
        for json_file in json_files:
            print(f"\n[FILE] {json_file.name}")
            
            try:
                if process_json_file(json_file):
                    total_exercises += 1
                total_processed += 1
                
            except Exception as e:
                print(f"  [ERROR] {e}")
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_processed}")
    print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}")
    print("=" * 60)
    
    if total_exercises > 0:
        print("\n[SUCCESS] –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print("[NEXT] –û–±–Ω–æ–≤–∏—Ç–µ json_generator.py –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        print("[NEXT] –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞")
    else:
        print("\n[WARNING] –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()
