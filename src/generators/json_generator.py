"""
JSON Generator - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∑ JSON –¥–∞–Ω–∏—Ö –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
–í–∫–ª—é—á–∞—î —É–ø—Ä–∞–∂–Ω–µ–Ω–Ω—è —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
"""

import json
import re
from pathlib import Path
from typing import Dict, List

from src.generators.exercises_assets import ExercisesAssetsGenerator
from src.generators.exercises_generator import ExercisesGenerator

def transliterate_filename(text):
    """–¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä—É—î –∫–∏—Ä–∏–ª–∏—á–Ω—É –Ω–∞–∑–≤—É –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ URL"""
    translit_table = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
        '–µ': 'e', '—ë': 'yo', '–∂': 'zh', '–∑': 'z', '–∏': 'i',
        '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
        '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
        '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch',
        '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '',
        '—ç': 'e', '—é': 'yu', '—è': 'ya',
        # –í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D',
        '–ï': 'E', '–Å': 'Yo', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I',
        '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N',
        '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T',
        '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch',
        '–®': 'Sh', '–©': 'Shch', '–™': '', '–´': 'Y', '–¨': '',
        '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    result = []
    for char in text:
        if char in translit_table:
            result.append(translit_table[char])
        elif char.isalnum() or char in '._-':
            result.append(char)
        elif char == ' ':
            result.append('_')
        else:
            result.append('_')
    
    # –û—á–∏—â–µ–Ω–Ω—è
    filename = ''.join(result)
    filename = re.sub(r'_+', '_', filename)
    filename = filename.strip('_')
    
    return filename

class JSONGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML –∑ JSON —Ñ–∞–π–ª—ñ–≤"""
    
    def __init__(self, logger):
        self.logger = logger
        self.files_generated = 0
        self.words_processed = 0
        self.exercises_generator = ExercisesGenerator(logger)
    
    def _create_exercise_html(self, exercise_data):
        """
        –°—Ç–≤–æ—Ä—é—î HTML –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–Ω—è –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
        """
        if not exercise_data:
            return ""
        
        title = exercise_data.get('title', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
        text = exercise_data.get('text', '')
        answers = exercise_data.get('answers', {})
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ HTML
        exercise_text = text
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–ø—É—Å–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º HTML —Ç–µ–≥—ñ–≤
        import re
        for hint, answer in answers.items():
            # –°—Ç–≤–æ—Ä—é—î–º–æ HTML blank –µ–ª–µ–º–µ–Ω—Ç
            html_blank = f'<span class="blank" data-hint="{hint}" data-answer="{answer}">_______ ({hint})</span>'
            
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤ hint –¥–ª—è regex
            escaped_hint = re.escape(hint)
            
            # –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–ø—É—Å–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ <span class="story-highlight"> —Ç–µ–≥—ñ–≤
            # –®–∞–±–ª–æ–Ω: <span class="story-highlight">...DER ___ (—Å–º–µ—Ä—Ç—å)...</span>
            pattern1 = rf'(<span class="story-highlight">[^<]*?)___ \({escaped_hint}\)([^<]*?</span>)'
            exercise_text = re.sub(pattern1, rf'\1{html_blank}\2', exercise_text)
            
            # –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ—Å—Ç—ñ –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ–∑–∞ —Ç–µ–≥–∞–º–∏ (—è–∫—â–æ —Ç–∞–∫—ñ —î)
            pattern2 = rf'(?<!>)___ \({escaped_hint}\)(?!<)'
            exercise_text = re.sub(pattern2, html_blank, exercise_text)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É—î–º–æ answers –≤ JSON –¥–ª—è JavaScript
        answers_json = json.dumps(answers, ensure_ascii=False)
        
        html = f'''
        <!-- –†–û–ó–î–Ü–õ 5: –£–ü–†–ê–ñ–ù–ï–ù–ù–Ø -->
        <section class="section">
            <h2 class="section-title">
                <span class="section-number">5</span>
                <span>üìù {title}</span>
            </h2>
            
            <div class="exercise-container">
                <div class="exercise-section">
                    <div class="exercise-text">
                        {exercise_text}
                    </div>
                    
                    <button class="show-answer-btn" onclick="toggleAnswers(this)" type="button">
                        –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
                    </button>
                </div>
            </div>
        </section>
        
        <script>
            // –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤–ø—Ä–∞–≤–∏  
            const exerciseAnswers = {answers_json};
            
            function toggleAnswers(button) {{
                const blanks = document.querySelectorAll('.blank');
                const isShowing = button.textContent === '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã';
                
                blanks.forEach(blank => {{
                    const hint = blank.dataset.hint;
                    const answer = exerciseAnswers[hint];
                    
                    if (isShowing) {{
                        blank.innerHTML = `_______ (${{hint}})`;
                        blank.classList.remove('filled');
                    }} else {{
                        if (answer) {{
                            blank.innerHTML = `<strong>${{answer}}</strong>`;
                            blank.classList.add('filled');
                        }}
                    }}
                }});
                
                button.textContent = isShowing ? '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã' : '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã';
                button.classList.toggle('success');
            }}
        </script>

        <!-- INTERACTIVE_EXERCISES_PLACEHOLDER -->

        <!-- –ù–ê–í–Ü–ì–ê–¶–Ü–Ø –ü–Ü–°–õ–Ø –£–ü–†–ê–ñ–ù–ï–ù–ù–Ø -->
        <div class="bottom-navigation">
            <a href="../index.html" class="nav-btn">
                <span class="nav-icon">üìö</span>
                <span>–ö —É—Ä–æ–∫–∞–º</span>
            </a>
            <a href="../../index.html" class="nav-btn nav-btn-home">
                <span class="nav-icon">üè†</span>
                <span>–ù–∞ –≥–ª–∞–≤–Ω—É—é</span>
            </a>
        </div>
        
        <style>
            /* –°—Ç–∏–ª—ñ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–Ω—è */
            .exercise-container {{
                margin-top: 30px;
            }}
            
            .exercise-section {{
                background: linear-gradient(135deg, #fff9e6 0%, #fff4d6 100%);
                border: 2px solid #f6ad55;
                padding: 30px;
                border-radius: 15px;
                position: relative;
            }}
            
            .exercise-text {{
                color: #4a5568;
                font-size: 1.15em;
                line-height: 1.9;
                text-align: justify;
                margin-bottom: 25px;
            }}
            
            .exercise-text .blank {{
                display: inline-block;
                min-width: 100px;
                border-bottom: 2px solid #f6ad55;
                margin: 0 4px;
                color: #a0aec0;
                font-style: italic;
                font-size: 0.9em;
                padding: 0 4px;
                transition: all 0.3s ease;
            }}
            
            .exercise-text .blank.filled {{
                color: #d97706;
                font-weight: 600;
                font-style: normal;
                border-bottom-color: #22c55e;
            }}
            
            .show-answer-btn {{
                background: linear-gradient(135deg, #f6ad55 0%, #ed8936 100%);
                color: white;
                border: none;
                padding: 18px 36px;
                border-radius: 12px;
                font-size: 1.15em;
                font-weight: 600;
                cursor: pointer;
                margin: 0 auto;
                display: block;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(237, 137, 54, 0.3);
                touch-action: manipulation;
                -webkit-tap-highlight-color: transparent;
                -webkit-user-select: none;
                user-select: none;
                min-height: 56px;
                min-width: 200px;
                -webkit-appearance: none;
                appearance: none;
            }}
            
            .show-answer-btn:hover {{
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(237, 137, 54, 0.4);
            }}
            
            .show-answer-btn:active {{
                transform: scale(0.98);
                box-shadow: 0 2px 8px rgba(237, 137, 54, 0.3);
            }}
            
            .show-answer-btn.success {{
                background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
            }}
            
            /* –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø—ñ—Å–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–Ω—è */
            .bottom-navigation {{
                margin-top: 50px;
                padding: 30px 0;
                display: flex;
                justify-content: center;
                gap: 20px;
                border-top: 2px solid #e2e8f0;
            }}
            
            .nav-btn {{
                display: inline-flex;
                align-items: center;
                gap: 10px;
                padding: 15px 30px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-decoration: none;
                border-radius: 25px;
                font-size: 1.1em;
                font-weight: 600;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(118, 75, 162, 0.3);
                touch-action: manipulation;
                -webkit-tap-highlight-color: transparent;
                min-height: 56px;
            }}
            
            .nav-btn:hover {{
                transform: translateY(-3px);
                box-shadow: 0 6px 20px rgba(118, 75, 162, 0.4);
            }}
            
            .nav-btn:active {{
                transform: scale(0.98);
            }}
            
            .nav-btn-home {{
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                box-shadow: 0 4px 15px rgba(245, 87, 108, 0.3);
            }}
            
            .nav-btn-home:hover {{
                box-shadow: 0 6px 20px rgba(245, 87, 108, 0.4);
            }}
            
            .nav-icon {{
                font-size: 1.3em;
            }}
            
            /* Mobile optimizations */
            @media (max-width: 768px) {{
                .exercise-section {{
                    padding: 20px;
                }}
                
                .exercise-text {{
                    font-size: 1.05em;
                }}
                
                .exercise-text .blank {{
                    min-width: 80px;
                }}
                
                .show-answer-btn {{
                    width: 90%;
                    max-width: 300px;
                    padding: 16px 24px;
                    font-size: 1.1em;
                }}
                
                .bottom-navigation {{
                    flex-direction: column;
                    align-items: center;
                    gap: 15px;
                    padding: 20px;
                }}
                
                .nav-btn {{
                    width: 90%;
                    max-width: 300px;
                    justify-content: center;
                }}
            }}
            
            /* iOS specific */
            @supports (-webkit-touch-callout: none) {{
                .show-answer-btn,
                .nav-btn {{
                    -webkit-appearance: none;
                    appearance: none;
                }}
            }}
        </style>
        
        <script>
        // Device detection
        const isTouchDevice = ('ontouchstart' in window) || 
                              (navigator.maxTouchPoints > 0) || 
                              (navigator.msMaxTouchPoints > 0);
        
        // Exercise answers data
        const exerciseAnswers = {answers_json};
        
        // Function to toggle answers
        function toggleAnswers(button) {{
            // Prevent double tap
            if (button.dataset.processing === 'true') return;
            button.dataset.processing = 'true';
            
            const exerciseText = button.parentElement.querySelector('.exercise-text');
            const blanks = exerciseText.querySelectorAll('.blank');
            
            if (button.textContent === '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã') {{
                // Show answers
                blanks.forEach(blank => {{
                    const hint = blank.getAttribute('data-hint');
                    const answer = exerciseAnswers[hint];
                    if (answer) {{
                        blank.innerHTML = answer + ' (' + hint + ')';
                        blank.classList.add('filled');
                    }}
                }});
                button.textContent = '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã';
                button.classList.add('success');
            }} else {{
                // Hide answers
                blanks.forEach(blank => {{
                    const hint = blank.getAttribute('data-hint');
                    blank.innerHTML = '_______ (' + hint + ')';
                    blank.classList.remove('filled');
                }});
                button.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã';
                button.classList.remove('success');
            }}
            
            // Haptic feedback for mobile
            if (navigator.vibrate && isTouchDevice) {{
                navigator.vibrate(15);
            }}
            
            // Reset processing flag
            setTimeout(() => {{
                button.dataset.processing = 'false';
            }}, 300);
        }}
        
        // Initialize button handlers
        document.addEventListener('DOMContentLoaded', function() {{
            const answerBtn = document.querySelector('.show-answer-btn');
            
            if (answerBtn) {{
                // Visual feedback for mobile
                if (isTouchDevice) {{
                    answerBtn.addEventListener('touchstart', function() {{
                        this.style.transform = 'scale(0.98)';
                        this.style.opacity = '0.9';
                    }});
                    
                    answerBtn.addEventListener('touchend', function() {{
                        setTimeout(() => {{
                            this.style.transform = 'scale(1)';
                            this.style.opacity = '1';
                        }}, 100);
                    }});
                }}
            }}
            
            // Navigation buttons mobile support
            const navBtns = document.querySelectorAll('.nav-btn');
            navBtns.forEach(btn => {{
                if (isTouchDevice) {{
                    btn.addEventListener('touchstart', function() {{
                        this.style.transform = 'scale(0.98)';
                    }});
                    
                    btn.addEventListener('touchend', function() {{
                        this.style.transform = 'scale(1)';
                    }});
                }}
            }});
        }});
        
        // Prevent iOS double-tap zoom
        if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {{
            let lastTouchEnd = 0;
            document.addEventListener('touchend', function(event) {{
                const now = Date.now();
                if (now - lastTouchEnd <= 300) {{
                    event.preventDefault();
                }}
                lastTouchEnd = now;
            }}, false);
        }}
        </script>
        '''
        
        return html
    
    def generate_from_json(self, data_dir, output_dir):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ HTML —Å–∞–π—Ç –∑ JSON –¥–∞–Ω–∏—Ö"""
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ JSON —Ñ–∞–π–ª–∏
            all_lessons = self._load_all_json(data_dir)
            
            if not all_lessons:
                self.logger.error("–ù–µ–º–∞—î JSON –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
                return False
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            self._create_structure(output_dir)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É
            for category, lessons in all_lessons.items():
                # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –≥—Ä—É–ø–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                groups = self._get_category_groups(category, lessons)
                
                for group_name, group_lessons in groups.items():
                    group_dir = output_dir / category / group_name
                    group_dir.mkdir(parents=True, exist_ok=True)
                    
                    for lesson in group_lessons:
                        html = self._generate_lesson_html(lesson, category)
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ safe_id –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
                        safe_filename = lesson.get('safe_id', transliterate_filename(lesson.get('id', 'lesson')))
                        filename = safe_filename + '.html'
                        output_file = group_dir / filename
                        
                        with open(output_file, 'w', encoding='utf-8') as f:
                            f.write(html)
                        
                        self.files_generated += 1
                        
                        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–ª—ñ–≤
                        vocab = lesson.get('vocabulary', [])
                        self.words_processed += len([w for w in vocab if w.get('german')])
                
                # –Ü–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                cat_index = self._generate_category_index(lessons, category, groups)
                with open(output_dir / category / "index.html", 'w', encoding='utf-8') as f:
                    f.write(cat_index)
                self.files_generated += 1
            
            # –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
            main_index = self._generate_main_index(all_lessons)
            with open(output_dir / "index.html", 'w', encoding='utf-8') as f:
                f.write(main_index)
            self.files_generated += 1
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSS —Ñ–∞–π–ª–∏
            self._create_css_files(output_dir)
            
            self.logger.success(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {self.files_generated} HTML —Ñ–∞–π–ª—ñ–≤ –∑ {self.words_processed} —Å–ª–æ–≤–∞–º–∏")
            return True
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑ JSON: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            return False
    
    def _load_all_json(self, data_dir):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ JSON —Ñ–∞–π–ª–∏"""
        
        all_lessons = {}
        categories = ['a2', 'b1', 'thematic']
        
        for category in categories:
            cat_dir = data_dir / category
            if not cat_dir.exists():
                continue
            
            lessons = []
            for json_file in sorted(cat_dir.glob("*.json")):
                try:
                    with open(json_file, 'r', encoding='utf-8') as f:
                        lesson = json.load(f)
                        # –î–æ–¥–∞—Ç–∏ ID –∑ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É —è–∫—â–æ –Ω–µ–º–∞—î
                        if 'id' not in lesson:
                            lesson['id'] = json_file.stem
                        # –î–æ–¥–∞—î–º–æ safe_id –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
                        lesson['safe_id'] = transliterate_filename(lesson['id'])
                        lessons.append(lesson)
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {json_file}: {e}")
            
            if lessons:
                all_lessons[category] = lessons
                self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(lessons)} —É—Ä–æ–∫—ñ–≤ –∑ {category}")
        
        return all_lessons
    
    def _get_category_groups(self, category, lessons):
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –≥—Ä—É–ø–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        
        groups = {}
        
        if category == 'a2':
            # –†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ —É—Ä–æ–∫–∏ –ø–æ –≥—Ä—É–ø–∞—Ö A2
            groups = {
                'gruppe_1_familie': [],
                'gruppe_2_emotionen': [],
                'gruppe_3_handlungen': [],
                'gruppe_4_orte': [],
                'gruppe_5_zeit': []
            }
            
            # –†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ —É—Ä–æ–∫–∏ –ø–æ –≥—Ä—É–ø–∞—Ö (–ø–æ 3 –≤ –∫–æ–∂–Ω—ñ–π)
            for i, lesson in enumerate(lessons):
                if i < 3:
                    groups['gruppe_1_familie'].append(lesson)
                elif i < 6:
                    groups['gruppe_2_emotionen'].append(lesson)
                elif i < 9:
                    groups['gruppe_3_handlungen'].append(lesson)
                elif i < 12:
                    groups['gruppe_4_orte'].append(lesson)
                else:
                    groups['gruppe_5_zeit'].append(lesson)
                    
        elif category == 'b1':
            # –†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ —É—Ä–æ–∫–∏ –ø–æ –≥—Ä—É–ø–∞—Ö B1
            groups = {
                'gruppe_1_hof': [],
                'gruppe_2_verrat': [],
                'gruppe_3_wahnsinn': [],
                'gruppe_4_erkenntnis': [],
                'gruppe_5_finale': []
            }
            
            for i, lesson in enumerate(lessons):
                if i < 3:
                    groups['gruppe_1_hof'].append(lesson)
                elif i < 6:
                    groups['gruppe_2_verrat'].append(lesson)
                elif i < 9:
                    groups['gruppe_3_wahnsinn'].append(lesson)
                elif i < 12:
                    groups['gruppe_4_erkenntnis'].append(lesson)
                else:
                    groups['gruppe_5_finale'].append(lesson)
                    
        elif category == 'thematic':
            # –í—Å—ñ —Ç–µ–º–∞—Ç–∏—á–Ω—ñ –≤ –æ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ
            groups = {'lessons': lessons}
        
        return groups
    
    def _create_structure(self, output_dir):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
        
        dirs = [
            output_dir / "css",
            output_dir / "js",
            output_dir / "a2",
            output_dir / "b1",
            output_dir / "thematic"
        ]
        
        for d in dirs:
            d.mkdir(parents=True, exist_ok=True)
    
    def _generate_lesson_html(self, lesson, category):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –¥–ª—è —É—Ä–æ–∫—É –∑ –£–°–Ü–ú–ê —Ä–æ–∑–¥—ñ–ª–∞–º–∏ –≤–∫–ª—é—á–∞—é—á–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–Ω—è"""
        
        from src.generators.original_styles import LESSON_STYLES
        
        # –î–∞–Ω—ñ –∑ JSON
        title = lesson.get('title', '–£—Ä–æ–∫')
        icon = lesson.get('icon', 'üìö')
        quote = lesson.get('quote', '')
        emotions = lesson.get('emotions', [])
        vocabulary = lesson.get('vocabulary', [])
        story = lesson.get('story', {})
        dialogues = lesson.get('dialogues', [])
        memory_trick = lesson.get('memory_trick', {})
        cheat_sheet = lesson.get('cheat_sheet', [])
        exercise = lesson.get('exercise', None)
        
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>{title}</title>
    <link rel="stylesheet" href="../../css/exercises.css"/>
    <style>
        {LESSON_STYLES}
        
        /* –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ */
        .story-container {{
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            border-left: 5px solid #764ba2;
        }}
        
        .story-highlight {{
            background: #ffeaa7;
            padding: 2px 5px;
            border-radius: 3px;
            font-weight: bold;
        }}
        
        .emotional-peak {{
            background: #ff6b6b;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            font-weight: bold;
        }}
        
        .dialogue-practice {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
        }}
        
        .dialogue-line {{
            margin-bottom: 25px;
            padding: 15px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        
        .dialogue-line strong {{
            color: #764ba2;
            font-size: 1.1em;
        }}
        
        .dialogue-line .german {{
            font-size: 1.2em;
            color: #2c3e50;
            margin: 10px 0;
        }}
        
        .dialogue-line .russian {{
            color: #7f8c8d;
            font-style: italic;
        }}
        
        .dialogue-line .emotion {{
            margin-top: 10px;
            color: #e74c3c;
        }}
        
        .cheat-sheet-table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        
        .cheat-sheet-table th {{
            background: #764ba2;
            color: white;
            padding: 12px;
            text-align: left;
        }}
        
        .cheat-sheet-table td {{
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }}
        
        .memory-trick {{
            background: #fff3cd;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            border: 2px solid #ffc107;
        }}
        
        .story-title {{
            color: #764ba2;
            font-size: 1.5em;
            margin-bottom: 15px;
        }}
        
        /* –°—Ç–∏–ª—ñ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è */
        .copy-button {{
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 25px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            transition: all 0.3s;
            z-index: 1000;
            font-family: 'Georgia', serif;
            -webkit-tap-highlight-color: transparent;
            -webkit-touch-callout: none;
            touch-action: manipulation;
        }}
        
        .copy-button:hover {{
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0,0,0,0.4);
        }}
        
        .copy-button:active {{
            transform: scale(0.95);
        }}
        
        .copy-button.success {{
            background: linear-gradient(135deg, #00b894, #00cec9);
        }}
        
        /* –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö */
        @media (max-width: 768px) {{
            .copy-button {{
                top: 10px;
                right: 10px;
                padding: 12px 20px;
                font-size: 1em;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <!-- –ù–∞–≤—ñ–≥–∞—Ü—ñ—è -->
        <div class="navigation">
            <a href="../index.html">‚Üê –ö —É—Ä–æ–∫–∞–º {category.upper()}</a>
            <a href="../../index.html">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
        
        <!-- –ö–Ω–æ–ø–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è -->
        <button id="copyLessonBtn" class="copy-button" onclick="copyLesson()">
            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫
        </button>
        
        <!-- SCENE MOMENT -->
        <div class="scene-moment">
            <h1>{icon} {title}</h1>
            <p class="shakespeare-quote">"{quote}"</p>
            <div class="emotion-tags">'''
        
        for emotion in emotions:
            html += f'''
                <span class="emotion-tag">{emotion}</span>'''
        
        html += '''
            </div>
        </div>
        
        <!-- –†–û–ó–î–Ü–õ 1: –°–õ–û–í–ê -->
        <section class="section">
            <h2 class="section-title">
                <span class="section-number">1</span>
                <span>üìö –°–ª–æ–≤–∞ –º–æ–º–µ–Ω—Ç–∞</span>
            </h2>
            <div class="word-cards">'''
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–∞—Ä—Ç–æ—á–æ–∫ —Å–ª—ñ–≤
        for word in vocabulary:
            if not word.get('german'):
                continue
                
            html += f'''
                <div class="word-card">
                    <div class="word-german">{word.get('german', '')}</div>
                    <div class="word-transcription">{word.get('transcription', '')}</div>
                    <div class="word-russian">{word.get('translation', '')}</div>'''
            
            if word.get('type'):
                html += f'''
                    <div class="word-type">{word['type']}</div>'''
            
            # Character voice
            voice = word.get('character_voice', {})
            if voice and voice.get('character'):
                html += f'''
                    <div class="character-voice">
                        <strong>{voice['character']}:</strong><br/>
                        "{voice.get('german', '')}"<br/>
                        ({voice.get('russian', '')})
                    </div>'''
            
            # Gesture
            gesture = word.get('gesture', {})
            if gesture and gesture.get('gesture'):
                html += f'''
                    <div class="gesture-anchor">
                        <span class="gesture-icon">{gesture.get('icon', 'üé≠')}</span>
                        <div>
                            <strong>–ñ–µ—Å—Ç-—è–∫–æ—Ä—å:</strong> {gesture['gesture']}<br/>
                            <strong>–≠–º–æ—Ü–∏—è:</strong> {gesture.get('emotion', '')}<br/>
                            <strong>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è:</strong> {gesture.get('association', '')}
                        </div>
                    </div>'''
            
            html += '''
                </div>'''
        
        html += '''
            </div>
        </section>
        
        <!-- –†–û–ó–î–Ü–õ 2: –¢–ï–ê–¢–†–ê–õ–¨–ù–ò–ô –ú–û–ú–ï–ù–¢ -->
        <section class="section">
            <h2 class="section-title">
                <span class="section-number">2</span>
                <span>üé≠ –¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç</span>
            </h2>
            <div class="story-container">
                <h3 class="story-title">''' + story.get('title', '–¢–ï–ê–¢–†–ê–õ–¨–ù–´–ô –ú–û–ú–ï–ù–¢') + '''</h3>
                <div class="story-text">''' + story.get('content', '') + '''
                </div>'''
        
        if story.get('emotional_peak'):
            html += f'''
                <div class="emotional-peak">
                    {story.get('emotional_peak', '')}
                </div>'''
        
        html += '''
            </div>
        </section>
        
        <!-- –†–û–ó–î–Ü–õ 3: –î–Ü–ê–õ–û–ì–ò -->
        <section class="section">
            <h2 class="section-title">
                <span class="section-number">3</span>
                <span>üí¨ –ñ–∏–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å—Ü–µ–Ω—ã</span>
            </h2>
            <div class="dialogue-practice">'''
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥—ñ–∞–ª–æ–≥—ñ–≤
        for dialogue in dialogues:
            html += f'''
                <div class="dialogue-line">
                    <strong>{dialogue.get('character', '')}:</strong>
                    <p class="german">{dialogue.get('german', '')}</p>
                    <p class="russian">({dialogue.get('russian', '')})</p>
                    <p class="emotion">{dialogue.get('emotion', '')}</p>
                </div>'''
        
        html += '''
            </div>
        </section>
        
        <!-- –†–û–ó–î–Ü–õ 4: –®–ü–ê–†–ì–ê–õ–ö–ê -->
        <section class="section">
            <h2 class="section-title">
                <span class="section-number">4</span>
                <span>üìå –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞</span>
            </h2>
            <div class="cheat-sheet">'''
        
        # –¢–∞–±–ª–∏—Ü—è —è–∫—â–æ —î –¥–∞–Ω—ñ
        if cheat_sheet:
            html += '''
                <h3>–Ø–ö–û–†–Ø –ü–ê–ú–Ø–¢–ò</h3>
                <table class="cheat-sheet-table">
                    <thead>
                        <tr>
                            <th>–ù–µ–º–µ—Ü–∫–∏–π</th>
                            <th>–†—É—Å—Å–∫–∏–π</th>
                            <th>–≠–º–æ—Ü–∏—è –º–æ–º–µ–Ω—Ç–∞</th>
                            <th>–ñ–µ—Å—Ç-—è–∫–æ—Ä—å</th>
                            <th>–ü–µ—Ä—Å–æ–Ω–∞–∂</th>
                        </tr>
                    </thead>
                    <tbody>'''
            
            for item in cheat_sheet:
                html += f'''
                        <tr>
                            <td><strong>{item.get('german', '')}</strong></td>
                            <td>{item.get('russian', '')}</td>
                            <td>{item.get('emotion_moment', '')}</td>
                            <td>{item.get('gesture_anchor', '')}</td>
                            <td>{item.get('character_moment', '')}</td>
                        </tr>'''
            
            html += '''
                    </tbody>
                </table>'''
        
        # Memory trick
        if memory_trick:
            if isinstance(memory_trick, dict):
                master = memory_trick.get('master_trick', '')
                chain = memory_trick.get('emotion_chain', '')
                ritual = memory_trick.get('ritual', '')
            else:
                master = memory_trick
                chain = ''
                ritual = ''
            
            html += f'''
                <div class="memory-trick">
                    üí° <strong>–ú–∞—Å—Ç–µ—Ä-—Ç—Ä—é–∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</strong><br/>
                    {master}<br/><br/>'''
            
            if chain:
                html += f'''
                    <strong>–¶–µ–ø–æ—á–∫–∞ —ç–º–æ—Ü–∏–π:</strong> {chain}<br/><br/>'''
            
            if ritual:
                html += f'''
                    <strong>–†–∏—Ç—É–∞–ª:</strong> {ritual}'''
            
            html += '''
                </div>'''
        
        html += '''
            </div>
        </section>'''

        exercises_html = ""
        try:
            exercise_bundle = self.exercises_generator.generate_all_exercises(lesson)
            exercises_html = self.exercises_generator.create_exercises_section(exercise_bundle)
        except Exception as exc:
            if self.logger:
                self.logger.warning(f"[Exercises] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–ø—Ä–∞–≤: {exc}")

        # –î–æ–¥–∞—î–º–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–Ω—è —è–∫—â–æ —î
        if exercise:
            exercise_html = self._create_exercise_html(exercise)
            if exercises_html:
                exercise_html = exercise_html.replace(
                    "<!-- INTERACTIVE_EXERCISES_PLACEHOLDER -->",
                    exercises_html,
                )
            html += exercise_html
        elif exercises_html:
            html += exercises_html
        
        html += '''
    </div>

    <script src="../../js/exercises.js" defer></script>

    <!-- JavaScript –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —É—Ä–æ–∫—É -->
    <script>
    function copyLesson() {
        // –ó–±—ñ—Ä –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö —É—Ä–æ–∫—É
        let lessonContent = '';
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const titleElement = document.querySelector('.scene-moment h1');
        if (titleElement) {
            lessonContent += '=== ' + titleElement.textContent + ' ===\\n\\n';
        }
        
        // –¶–∏—Ç–∞—Ç–∞
        const quoteElement = document.querySelector('.shakespeare-quote');
        if (quoteElement) {
            lessonContent += '–¶–∏—Ç–∞—Ç–∞: ' + quoteElement.textContent + '\\n\\n';
        }
        
        // –ï–º–æ—Ü—ñ—ó
        const emotionTags = document.querySelectorAll('.emotion-tag');
        if (emotionTags.length > 0) {
            lessonContent += '–≠–º–æ—Ü–∏–∏: ';
            emotionTags.forEach((tag, index) => {
                lessonContent += tag.textContent;
                if (index < emotionTags.length - 1) lessonContent += ', ';
            });
            lessonContent += '\\n\\n';
        }
        
        // –°–ª–æ–≤–∞
        lessonContent += '=== –°–õ–û–í–ê –ú–û–ú–ï–ù–¢–ê ===\\n\\n';
        const wordCards = document.querySelectorAll('.word-card');
        wordCards.forEach(card => {
            const german = card.querySelector('.word-german');
            const transcription = card.querySelector('.word-transcription');
            const russian = card.querySelector('.word-russian');
            const type = card.querySelector('.word-type');
            
            if (german) {
                lessonContent += german.textContent;
                if (transcription && transcription.textContent) {
                    lessonContent += ' ' + transcription.textContent;
                }
                if (russian) {
                    lessonContent += ' - ' + russian.textContent;
                }
                if (type && type.textContent) {
                    lessonContent += ' (' + type.textContent + ')';
                }
                lessonContent += '\\n';
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                const characterVoice = card.querySelector('.character-voice');
                if (characterVoice) {
                    lessonContent += '  ' + characterVoice.textContent.replace(/\\n/g, ' ').trim() + '\\n';
                }
                
                const gesture = card.querySelector('.gesture-anchor');
                if (gesture) {
                    lessonContent += '  ' + gesture.textContent.replace(/\\n/g, ' ').trim() + '\\n';
                }
                
                lessonContent += '\\n';
            }
        });
        
        // –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç
        const storyTitle = document.querySelector('.story-title');
        const storyText = document.querySelector('.story-text');
        if (storyTitle || storyText) {
            lessonContent += '\\n=== –¢–ï–ê–¢–†–ê–õ–¨–ù–´–ô –ú–û–ú–ï–ù–¢ ===\\n\\n';
            if (storyTitle) {
                lessonContent += storyTitle.textContent + '\\n\\n';
            }
            if (storyText) {
                lessonContent += storyText.textContent.trim() + '\\n';
            }
            
            const emotionalPeak = document.querySelector('.emotional-peak');
            if (emotionalPeak) {
                lessonContent += '\\n–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏–∫: ' + emotionalPeak.textContent.trim() + '\\n';
            }
        }
        
        // –î—ñ–∞–ª–æ–≥–∏
        const dialogues = document.querySelectorAll('.dialogue-line');
        if (dialogues.length > 0) {
            lessonContent += '\\n=== –ñ–ò–í–´–ï –î–ò–ê–õ–û–ì–ò ===\\n\\n';
            dialogues.forEach(dialogue => {
                const character = dialogue.querySelector('strong');
                const germanText = dialogue.querySelector('.german');
                const russianText = dialogue.querySelector('.russian');
                const emotionText = dialogue.querySelector('.emotion');
                
                if (character) {
                    lessonContent += character.textContent + '\\n';
                }
                if (germanText) {
                    lessonContent += germanText.textContent + '\\n';
                }
                if (russianText) {
                    lessonContent += russianText.textContent + '\\n';
                }
                if (emotionText) {
                    lessonContent += emotionText.textContent + '\\n';
                }
                lessonContent += '\\n';
            });
        }
        
        // –®–ø–∞—Ä–≥–∞–ª–∫–∞
        const cheatSheetTable = document.querySelector('.cheat-sheet-table');
        if (cheatSheetTable) {
            lessonContent += '\\n=== –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –®–ü–ê–†–ì–ê–õ–ö–ê ===\\n\\n';
            const rows = cheatSheetTable.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length >= 5) {
                    lessonContent += cells[0].textContent + ' - ' + cells[1].textContent;
                    lessonContent += ' | –≠–º–æ—Ü–∏—è: ' + cells[2].textContent;
                    lessonContent += ' | –ñ–µ—Å—Ç: ' + cells[3].textContent;
                    lessonContent += ' | –ü–µ—Ä—Å–æ–Ω–∞–∂: ' + cells[4].textContent + '\\n';
                }
            });
        }
        
        // Memory trick
        const memoryTrick = document.querySelector('.memory-trick');
        if (memoryTrick) {
            lessonContent += '\\n' + memoryTrick.textContent.trim() + '\\n';
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é iOS
        function copyToClipboard(text) {
            const btn = document.getElementById('copyLessonBtn');
            const originalText = btn.textContent;
            
            // –°–ø—Ä–æ–±—É—î–º–æ —Å—É—á–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    showSuccess();
                }).catch(() => {
                    fallbackCopy();
                });
            } else {
                // Fallback –¥–ª—è iOS —Ç–∞ —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
                fallbackCopy();
            }
            
            function fallbackCopy() {
                // –°—Ç–≤–æ—Ä—é—î–º–æ textarea
                const textarea = document.createElement('textarea');
                textarea.value = text;
                textarea.style.position = 'fixed';
                textarea.style.top = '0';
                textarea.style.left = '0';
                textarea.style.width = '2em';
                textarea.style.height = '2em';
                textarea.style.padding = '0';
                textarea.style.border = 'none';
                textarea.style.outline = 'none';
                textarea.style.boxShadow = 'none';
                textarea.style.background = 'transparent';
                textarea.style.fontSize = '16px'; // –ó–∞–ø–æ–±—ñ–≥–∞—î zoom –Ω–∞ iOS
                
                document.body.appendChild(textarea);
                
                // –î–ª—è iOS –ø–æ—Ç—Ä—ñ–±–µ–Ω –æ—Å–æ–±–ª–∏–≤–∏–π –ø—ñ–¥—Ö—ñ–¥
                if (navigator.userAgent.match(/ipad|iphone/i)) {
                    const range = document.createRange();
                    range.selectNodeContents(textarea);
                    const selection = window.getSelection();
                    selection.removeAllRanges();
                    selection.addRange(range);
                    textarea.setSelectionRange(0, 999999);
                } else {
                    textarea.select();
                }
                
                try {
                    const successful = document.execCommand('copy');
                    if (successful) {
                        showSuccess();
                    } else {
                        showManualCopy();
                    }
                } catch (err) {
                    showManualCopy();
                }
                
                document.body.removeChild(textarea);
            }
            
            function showSuccess() {
                btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                btn.classList.add('success');
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.classList.remove('success');
                }, 2000);
            }
            
            function showManualCopy() {
                // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: white;
                    padding: 20px;
                    border-radius: 10px;
                    box-shadow: 0 5px 20px rgba(0,0,0,0.3);
                    z-index: 10000;
                    max-width: 90%;
                    max-height: 80vh;
                `;
                
                modal.innerHTML = `
                    <h3 style="margin-top: 0;">–í—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:</h3>
                    <textarea readonly style="
                        width: 100%;
                        min-width: 300px;
                        height: 300px;
                        padding: 10px;
                        border: 1px solid #ccc;
                        border-radius: 5px;
                        font-size: 14px;
                        resize: vertical;
                    ">${text.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</textarea>
                    <button onclick="this.parentElement.remove()" style="
                        margin-top: 10px;
                        padding: 10px 20px;
                        background: #764ba2;
                        color: white;
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 16px;
                    ">–ó–∞–∫—Ä—ã—Ç—å</button>
                `;
                
                document.body.appendChild(modal);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
                const textarea = modal.querySelector('textarea');
                textarea.select();
                textarea.setSelectionRange(0, 999999);
            }
        }
        
        copyToClipboard(lessonContent);
    }
    </script>
</body>
</html>'''
        
        return html
    
    def _generate_category_index(self, lessons, category, groups):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        
        from src.generators.original_styles import NAVIGATION_STYLES
        
        cat_names = {
            'a2': '–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å A2',
            'b1': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å B1',
            'thematic': '–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏'
        }
        
        group_names = {
            'gruppe_1_familie': '–ì—Ä—É–ø–ø–∞ 1: –°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
            'gruppe_2_emotionen': '–ì—Ä—É–ø–ø–∞ 2: –≠–º–æ—Ü–∏–∏ –≥–µ—Ä–æ–µ–≤',
            'gruppe_3_handlungen': '–ì—Ä—É–ø–ø–∞ 3: –î–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ—Å—Ç—É–ø–∫–∏',
            'gruppe_4_orte': '–ì—Ä—É–ø–ø–∞ 4: –ú–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π',
            'gruppe_5_zeit': '–ì—Ä—É–ø–ø–∞ 5: –í—Ä–µ–º—è –≤ –ø—å–µ—Å–µ',
            'gruppe_1_hof': '–ì—Ä—É–ø–ø–∞ 1: –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –¥–≤–æ—Ä',
            'gruppe_2_verrat': '–ì—Ä—É–ø–ø–∞ 2: –ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
            'gruppe_3_wahnsinn': '–ì—Ä—É–ø–ø–∞ 3: –ë–µ–∑—É–º–∏–µ –∏ –±—É—Ä—è',
            'gruppe_4_erkenntnis': '–ì—Ä—É–ø–ø–∞ 4: –ü—Ä–æ–∑—Ä–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤',
            'gruppe_5_finale': '–ì—Ä—É–ø–ø–∞ 5: –¢—Ä–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–Ω–∞–ª',
            'lessons': '–í—Å–µ —É—Ä–æ–∫–∏'
        }
        
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{cat_names.get(category, category.upper())}</title>
    <style>
        {NAVIGATION_STYLES}
    </style>
</head>
<body>
    <div class="container">
        <div class="navigation">
            <a href="../index.html">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
        
        <header class="header">
            <h1>{cat_names.get(category, category.upper())}</h1>
            <p>{len(lessons)} —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ</p>
        </header>
        
        <div class="groups">'''
        
        for group_name, group_lessons in groups.items():
            if not group_lessons:
                continue
                
            html += f'''
            <div class="group">
                <div class="group-header">
                    <h2>{group_names.get(group_name, group_name)}</h2>
                </div>
                <div class="group-lessons">'''
            
            for i, lesson in enumerate(group_lessons, 1):
                safe_id = lesson.get('safe_id', transliterate_filename(lesson.get('id', 'lesson')))
                html += f'''
                    <a href="{group_name}/{safe_id}.html" class="lesson-card">
                        <div class="lesson-number">–£—Ä–æ–∫ {i}</div>
                        <div class="lesson-title">{lesson.get('icon', 'üìö')} {lesson.get('title', lesson['id'])}</div>
                    </a>'''
            
            html += '''
                </div>
            </div>'''
        
        html += '''
        </div>
    </div>
</body>
</html>'''
        
        return html
    
    def _generate_main_index(self, all_lessons):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        
        from src.generators.original_styles import MAIN_PAGE_STYLES
        
        html = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>–ù–µ–º–µ—Ü–∫–∏–π —á–µ—Ä–µ–∑ –ö–æ—Ä–æ–ª—è –õ–∏—Ä–∞ - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å</title>
    <link href="css/style.css" rel="stylesheet"/>
</head>
<body>
    <header class="header">
        <h1>üé≠ –ù–µ–º–µ—Ü–∫–∏–π —á–µ—Ä–µ–∑ –ö–æ—Ä–æ–ª—è –õ–∏—Ä–∞</h1>
        <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å —Å —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏</p>
    </header>
    
    <main class="container">
        <div class="levels">
            <div class="level-card level-a2">
                <div class="level-header">
                    <h2>–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å</h2>
                    <span class="level-badge">–£—Ä–æ–≤–µ–Ω—å A2</span>
                </div>
                <div class="level-content">
                    <h3>üìö 15 —Å—Ü–µ–Ω –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö</h3>
                    <p>–ë–∞–∑–æ–≤–∞—è –ª–µ–∫—Å–∏–∫–∞ —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ "–ö–æ—Ä–æ–ª—è –õ–∏—Ä–∞"</p>
                    <ul>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –≠–º–æ—Ü–∏–∏ –≥–µ—Ä–æ–µ–≤</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –î–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ—Å—Ç—É–ø–∫–∏</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –ú–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –í—Ä–µ–º—è –≤ –ø—å–µ—Å–µ</li>
                    </ul>
                    <a class="level-button" href="a2/index.html">–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ A2 ‚Üí</a>
                </div>
            </div>
            
            <div class="level-card level-b1">
                <div class="level-header">
                    <h2>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å</h2>
                    <span class="level-badge">–£—Ä–æ–≤–µ–Ω—å B1</span>
                </div>
                <div class="level-content">
                    <h3>üé¨ 15 —Å—Ü–µ–Ω —Ç—Ä–∞–≥–µ–¥–∏–∏</h3>
                    <p>–°–ª–æ–∂–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤</p>
                    <ul>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –¥–≤–æ—Ä</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –ë–µ–∑—É–º–∏–µ –∏ –±—É—Ä—è</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –ü—Ä–æ–∑—Ä–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤</li>
                        <li>‚úì 3 —Å—Ü–µ–Ω—ã: –¢—Ä–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–Ω–∞–ª</li>
                    </ul>
                    <a class="level-button" href="b1/index.html">–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ B1 ‚Üí</a>
                </div>
            </div>
        </div>
        
        <!-- –†–æ–∂–µ–≤–∏–π –±–ª–æ–∫ —Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ -->
        <div style="margin-top: 40px;">
            <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); 
                        border-radius: 20px; padding: 30px; text-align: center; 
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
                <h2 style="color: white; margin-bottom: 15px; font-size: 2em;">
                    üìö –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã
                </h2>
                <p style="color: white; margin-bottom: 20px; font-size: 1.1em;">
                    21 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏ –≥–ª–∞–≥–æ–ª–∞–º
                </p>
                <a href="thematic/index.html" style="display: inline-block; 
                   padding: 15px 40px; background: white; color: #f5576c; 
                   text-decoration: none; border-radius: 25px; font-weight: bold; 
                   font-size: 1.2em; box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                   transition: transform 0.3s;">
                   –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫—É—Ä—Å–∞–º ‚Üí
                </a>
            </div>
        </div>
        
        <!-- –ë–ª–æ–∫ —Å –∫–Ω–∏–≥–æ—é K√∂nig Lear -->
        <div style="margin-top: 40px;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                        border-radius: 20px; padding: 30px; text-align: center; 
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
                <h2 style="color: white; margin-bottom: 15px; font-size: 2em;">
                    üìñ K√∂nig Lear - –û—Ä–∏–≥–∏–Ω–∞–ª
                </h2>
                <p style="color: white; margin-bottom: 20px; font-size: 1.1em;">
                    –ß–∏—Ç–∞–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–≥–µ–¥–∏–∏ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ
                </p>
                <a href="book/index.html" style="display: inline-block; 
                   padding: 15px 40px; background: white; color: #764ba2; 
                   text-decoration: none; border-radius: 25px; font-weight: bold; 
                   font-size: 1.2em; box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                   transition: transform 0.3s;"
                   onmouseover="this.style.transform='translateY(-3px)'"
                   onmouseout="this.style.transform='translateY(0)'">
                   üìñ –ß–∏—Ç–∞—Ç—å K√∂nig Lear ‚Üí
                </a>
            </div>
        </div>
    </main>
</body>
</html>'''
        
        return html
    
    def _create_css_files(self, output_dir):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ CSS —Ñ–∞–π–ª–∏"""

        from src.generators.original_styles import MAIN_PAGE_STYLES

        css_dir = output_dir / "css"
        css_dir.mkdir(parents=True, exist_ok=True)

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ style.css –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        with open(css_dir / "style.css", 'w', encoding='utf-8') as f:
            f.write(MAIN_PAGE_STYLES)

        assets_generator = ExercisesAssetsGenerator()

        with open(css_dir / "exercises.css", 'w', encoding='utf-8') as f:
            f.write(assets_generator.generate_css())

        js_dir = output_dir / "js"
        js_dir.mkdir(parents=True, exist_ok=True)

        with open(js_dir / "exercises.js", 'w', encoding='utf-8') as f:
            f.write(assets_generator.generate_js())

        self.logger.info("CSS —Ç–∞ JS —Ñ–∞–π–ª–∏ –¥–ª—è –≤–ø—Ä–∞–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    
    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        
        return {
            'files_generated': self.files_generated,
            'words_processed': self.words_processed
        }
