"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º Lir
–ï—Å–ª–∏ –Ω–µ—Ç story/dialogues, —Å–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ vocabulary
"""
import json
import re
from pathlib import Path
import random

def extract_words_from_vocabulary(vocabulary):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞"""
    words_dict = {}
    
    for word_data in vocabulary:
        german = word_data.get('german', '')
        translation = word_data.get('translation', '')
        
        if german and translation:
            # –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫–ª–∏ –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤
            clean_german = german
            if word_data.get('type') == '–≥–ª–∞–≥–æ–ª':
                clean_german = german
            elif word_data.get('type') == '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ':
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
                clean_german = german
            
            words_dict[translation.lower()] = clean_german
    
    return words_dict

def create_simple_exercise_from_vocabulary(vocabulary):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –º–∞–ª–æ —Å–ª–æ–≤
    """
    words = extract_words_from_vocabulary(vocabulary)
    
    if not words:
        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        return {
            'text': '–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å –Ω–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ.',
            'answers': {}
        }
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5-8 —Å–ª–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    word_items = list(words.items())[:8]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_sentences = []
    answers = {}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
    templates = [
        "Das ist ___ ({}).",
        "Ich habe ___ ({}).",
        "Wo ist ___ ({})?",
        "Er sagt: ___ ({})!",
        "Sie braucht ___ ({}).",
        "Wir sehen ___ ({}).",
        "Das war ___ ({}).",
        "Hier ist ___ ({})."
    ]
    
    for i, (rus_word, ger_word) in enumerate(word_items):
        if i < len(templates):
            sentence = templates[i].format(rus_word)
            exercise_sentences.append(sentence)
            answers[rus_word] = ger_word
    
    # –ï—Å–ª–∏ —Å–ª–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Ñ—Ä–∞–∑—É
    if len(answers) < 3:
        exercise_sentences.append("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞: " + ", ".join([f"___ ({r})" for r, g in word_items[:3]]))
        for r, g in word_items[:3]:
            answers[r] = g
    
    return {
        'text': ' '.join(exercise_sentences),
        'answers': answers
    }

def create_exercise_from_dialogues(dialogues, vocab_words):
    """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not dialogues:
        return None
    
    exercise_lines = []
    answers = {}
    
    for dialogue in dialogues[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–∏–∞–ª–æ–≥–∞
        character = dialogue.get('character', '–ü–µ—Ä—Å–æ–Ω–∞–∂')
        russian = dialogue.get('russian', '')
        german = dialogue.get('german', '')
        
        if not russian or not german:
            continue
        
        # –ò—â–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
        words_replaced = 0
        modified_text = russian
        
        for rus_word, ger_word in vocab_words.items():
            if rus_word in russian.lower() and words_replaced < 2:
                placeholder = f"___ ({rus_word})"
                pattern = re.compile(re.escape(rus_word), re.IGNORECASE)
                if pattern.search(modified_text):
                    modified_text = pattern.sub(placeholder, modified_text, count=1)
                    answers[rus_word] = ger_word
                    words_replaced += 1
        
        if words_replaced > 0:
            exercise_lines.append(f"{character}: ¬´{modified_text}¬ª")
    
    if not exercise_lines:
        return None
    
    return {
        'text': ' '.join(exercise_lines),
        'answers': answers
    }

def create_exercise_from_story(story_data, vocab_words):
    """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    content = story_data.get('content', '')
    if not content:
        narrative = story_data.get('narrative', '')
        if narrative:
            content = narrative
    
    if not content:
        return None
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    sentences = content.split('.')[:5]
    exercise_text = '. '.join(sentences) + '.'
    answers = {}
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
    words_to_replace = list(vocab_words.items())[:8]
    
    for rus_word, ger_word in words_to_replace:
        if rus_word in exercise_text.lower():
            placeholder = f"___ ({rus_word})"
            pattern = re.compile(re.escape(rus_word), re.IGNORECASE)
            if pattern.search(exercise_text):
                exercise_text = pattern.sub(placeholder, exercise_text, count=1)
                answers[rus_word] = ger_word
    
    if not answers:
        return None
    
    return {
        'text': exercise_text,
        'answers': answers
    }

def process_json_file(json_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω JSON —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
    """
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    if 'exercise' in data:
        print(f"  [SKIP] –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    vocabulary = data.get('vocabulary', [])
    vocab_words = extract_words_from_vocabulary(vocabulary)
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    exercise = None
    
    # 1. –ü—Ä–æ–±—É–µ–º –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
    dialogues = data.get('dialogues', [])
    if dialogues and vocab_words:
        exercise = create_exercise_from_dialogues(dialogues, vocab_words)
    
    # 2. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    if not exercise:
        story = data.get('story', {})
        if story and vocab_words:
            exercise = create_exercise_from_story(story, vocab_words)
    
    # 3. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    # –≠–¢–û –ì–ê–†–ê–ù–¢–ò–†–£–ï–¢, —á—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –í–°–ï–ì–î–ê –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
    if not exercise:
        exercise = create_simple_exercise_from_vocabulary(vocabulary)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = data.get('title', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–æ–º–µ—Ä –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    clean_title = re.sub(r'üìö\s*–°–¶–ï–ù–ê\s*\d+:\s*', '', title)
    clean_title = re.sub(r'[üìöüé≠üí¨üìå]\s*', '', clean_title)
    
    data['exercise'] = {
        'title': f"–£–ü–†–ê–ñ–ù–ï–ù–ò–ï: {clean_title}",
        'text': exercise['text'],
        'answers': exercise['answers']
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    answers_count = len(exercise['answers'])
    if answers_count > 0:
        print(f"  [OK] –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å {answers_count} –ø—Ä–æ–ø—É—Å–∫–∞–º–∏")
    else:
        print(f"  [OK] –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–æ–±—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ)")
    return True

def main():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ Lir"""
    print("=" * 60)
    print("–î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –í –ü–†–û–ï–ö–¢ LIR (v2.0)")
    print("=" * 60)
    
    base_dir = Path(r'F:\AiKlientBank\Lir\data')
    categories = ['a2', 'b1', 'thematic']
    
    total_processed = 0
    total_exercises = 0
    failed_files = []
    
    for category in categories:
        cat_dir = base_dir / category
        if not cat_dir.exists():
            print(f"\n[SKIP] –ü–∞–ø–∫–∞ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        print(f"\n[CATEGORY] {category.upper()}")
        print("-" * 40)
        
        json_files = sorted(cat_dir.glob("*.json"))
        
        for json_file in json_files:
            print(f"\n[FILE] {json_file.name}")
            
            try:
                if process_json_file(json_file):
                    total_exercises += 1
                total_processed += 1
                
            except Exception as e:
                print(f"  [ERROR] {e}")
                failed_files.append(str(json_file))
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_processed}")
    print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}")
    
    if failed_files:
        print(f"\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for f in failed_files:
            print(f"  - {f}")
    
    print("=" * 60)
    
    if total_exercises > 0:
        print("\n[SUCCESS] –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print("[INFO] –¢–µ–ø–µ—Ä—å –í–°–ï —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    else:
        print("\n[INFO] –ù–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    main()
