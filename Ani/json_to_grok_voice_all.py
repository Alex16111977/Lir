"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è Grok-4 v8.4
–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ –∑ –ø–∞–ø–∫–∏ data
–°—Ç–≤–æ—Ä—é—î DOCX —Ñ–∞–π–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ Ani/grok/{a2,b1,thematic}
–ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –í–°–ï 12 —Å–ª–æ–≤ –∏–∑ JSON
"""

import json
import sys
import subprocess
import importlib.util
from pathlib import Path
from datetime import datetime

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è python-docx
def ensure_docx_installed():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è python-docx"""
    if importlib.util.find_spec("docx") is None:
        print("[!] –í—Å—Ç–∞–Ω–æ–≤–ª—é—é python-docx...")
        venv_pip = r"F:\AiKlientBank\Lir\.venv\Scripts\pip.exe"
        result = subprocess.run(
            [venv_pip, "install", "python-docx"],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            print("[OK] python-docx –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏: {result.stderr}")
            sys.exit(1)

ensure_docx_installed()

from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
DATA_DIR = Path(r"F:\AiKlientBank\Lir\data")
OUTPUT_DIR = Path(r"F:\AiKlientBank\Lir\Ani\grok")

def load_json_data(json_path):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON –¥–∞–Ω–∏—Ö –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"[OK] JSON –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {json_path.name}")
        print(f"[+] –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data.get('title', '')}")
        print(f"[+] –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: {len(data.get('vocabulary', []))}")
        return data
    except json.JSONDecodeError as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ JSON: {e} –≤ {json_path}")
        return None
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e} –≤ {json_path}")
        return None

class GrokDocxCreator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∑ –≥–æ—Ç–æ–≤–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é"""
    
    def __init__(self, json_data, json_filename="—É—Ä–æ–∫"):
        self.data = json_data
        self.filename = json_filename.replace('.json', '')
        self.doc = Document()
        self.vocabulary = self.data.get('vocabulary', [])[:12]  # –í—Å–µ 12 —Å–ª—ñ–≤ –∑ JSON
        self.setup_document()
    
    def setup_document(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        sections = self.doc.sections
        for section in sections:
            section.top_margin = Inches(0.8)
            section.bottom_margin = Inches(0.8)
            section.left_margin = Inches(1)
            section.right_margin = Inches(1)
        
        style = self.doc.styles['Normal']
        style.font.name = 'Arial'
        style.font.size = Pt(11)
        print("[OK] –î–æ–∫—É–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    
    def format_transcription(self, transcription):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó"""
        if not transcription:
            return ""
        formatted = transcription.replace('[', '').replace(']', '')
        formatted = formatted.replace(' ', '-')
        return formatted
    
    def add_header(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ - –í–Ü–î–ö–õ–Æ–ß–ï–ù–û"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        pass
    
    def create_theatrical_story(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑ –í–°–Ü–ú–ê 12 –Ω—ñ–º–µ—Ü—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ JSON
        title = self.data.get('title', '').replace('üé≠', '').replace('üè∞', '').replace('üëë', '').strip()
        emotions = self.data.get('emotions', [])
        dialogues = self.data.get('dialogues', [])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        story_text = f"### {title.upper()}\n\n"
        
        # –í—Å—Ç—É–ø–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑ –µ–º–æ—Ü—ñ—è–º–∏
        if emotions:
            clean_emotions = [e.replace('‚ö°', '').replace('üëë', '').replace('üé≠', '').strip() 
                            for e in emotions]
            story_text += f"–≠–º–æ—Ü–∏–∏ —Å—Ü–µ–Ω—ã: {', '.join(clean_emotions)}\n\n"
        
        # –ê–ö–¢ 1: –í–°–¢–£–ü (—Å–ª–æ–≤–∞ 1-4)
        story_text += "**–ê–ö–¢ 1: –í–°–¢–£–ü–õ–ï–ù–ò–ï**\n\n"
        story_text += "–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª. –ö–æ—Ä–æ–ª—å –õ–∏—Ä –≤—Ö–æ–¥–∏—Ç.\n\n"
        
        for i, word in enumerate(self.vocabulary[:4]):
            german = word.get('german', '')
            transcription = self.format_transcription(word.get('transcription', ''))
            translation = word.get('translation', '')
            character_voice = word.get('character_voice', {})
            character = character_voice.get('character', '–†–∞—Å—Å–∫–∞–∑—á–∏–∫')
            voice_german = character_voice.get('german', '')
            voice_russian = character_voice.get('russian', '')
            
            if german and transcription and translation:
                story_text += f"{character}: "
                if voice_german:
                    story_text += f'"{voice_german}"\n'
                    story_text += f'(**{german.upper()}** [{transcription}] ... {translation})\n'
                    if voice_russian:
                        story_text += f'({voice_russian})\n'
                else:
                    story_text += f"–í —ç—Ç–æ–π —Å—Ü–µ–Ω–µ –≤–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ **{german.upper()}** [{transcription}] ... "
                    story_text += f"({translation})\n"
                
                story_text += "\n"
        
        story_text += "*** [–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞] ***\n\n"
        
        # –ê–ö–¢ 2: –†–ê–ó–í–ò–¢–ò–ï (—Å–ª–æ–≤–∞ 5-8)
        story_text += "**–ê–ö–¢ 2: –†–ê–ó–í–ò–¢–ò–ï –î–ï–ô–°–¢–í–ò–Ø**\n\n"
        
        for i, word in enumerate(self.vocabulary[4:8]):
            german = word.get('german', '')
            transcription = self.format_transcription(word.get('transcription', ''))
            translation = word.get('translation', '')
            character_voice = word.get('character_voice', {})
            character = character_voice.get('character', '–†–∞—Å—Å–∫–∞–∑—á–∏–∫')
            voice_german = character_voice.get('german', '')
            voice_russian = character_voice.get('russian', '')
            
            if german and transcription and translation:
                story_text += f"{character}: "
                if voice_german:
                    story_text += f'"{voice_german}"\n'
                    story_text += f'(**{german.upper()}** [{transcription}] ... {translation})\n'
                    if voice_russian:
                        story_text += f'({voice_russian})\n'
                else:
                    story_text += f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –º–æ–º–µ–Ω—Ç–∞ **{german.upper()}** [{transcription}] ... "
                    story_text += f"({translation})\n"
                
                story_text += "\n"
                
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 —Å–ª–æ–≤
                if (i + 1) % 2 == 0:
                    story_text += "*** [–ø–∞—É–∑–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è] ***\n\n"
        
        # –ê–ö–¢ 3: –ö–£–õ–¨–ú–ò–ù–ê–¶–ò–Ø (—Å–ª–æ–≤–∞ 9-10)
        story_text += "**–ê–ö–¢ 3: –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ü–ò–ö**\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if dialogues:
            for d in dialogues[:2]:
                character = d.get('character', '').replace('üé≠', '').replace('üëë', '').strip()
                emotion = d.get('emotion', '').replace('üé≠', '').replace('üëë', '').strip()
                dialog_german = d.get('german', '')
                dialog_russian = d.get('russian', '')
                
                if character and dialog_german:
                    story_text += f"{character}: [{emotion}]\n"
                    story_text += f'"{dialog_german}"\n'
                    story_text += f'({dialog_russian})\n\n'
        
        # –°–ª–æ–≤–∞ 9-10
        for word in self.vocabulary[8:10]:
            german = word.get('german', '')
            transcription = self.format_transcription(word.get('transcription', ''))
            translation = word.get('translation', '')
            
            if german:
                story_text += f"–ö—É–ª—å–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: **{german.upper()}** [{transcription}] ... ({translation})\n"
        
        story_text += "\n*** [–Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–∞—è –ø–∞—É–∑–∞] ***\n\n"
        
        # –ê–ö–¢ 4: –§–ò–ù–ê–õ (—Å–ª–æ–≤–∞ 11-12)
        story_text += "**–ê–ö–¢ 4: –§–ò–ù–ê–õ**\n\n"
        
        for word in self.vocabulary[10:12]:
            german = word.get('german', '')
            transcription = self.format_transcription(word.get('transcription', ''))
            translation = word.get('translation', '')
            character_voice = word.get('character_voice', {})
            character = character_voice.get('character', '–õ–∏—Ä')
            
            if german:
                story_text += f"{character}: "
                story_text += f"–í —Ñ–∏–Ω–∞–ª–µ –∑–≤—É—á–∏—Ç **{german.upper()}** [{transcription}] ... ({translation})\n"
        
        story_text += "\n*** –ó–∞–Ω–∞–≤–µ—Å –ø–∞–¥–∞–µ—Ç ***\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        story_text += "\n**–°–õ–û–í–ê–†–¨ –£–†–û–ö–ê (–≤—Å–µ 12 —Å–ª–æ–≤):**\n"
        for i, word in enumerate(self.vocabulary[:12]):
            german = word.get('german', '')
            if german:
                story_text += f"{i+1}. {german.upper()}\n"
        
        return story_text
    
    def add_theatrical_prompt(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –∑ —á—ñ—Ç–∫–∏–º —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —ñ —Ç–µ–∫—Å—Ç—É - –†–£–°–°–ö–ò–ô –Ø–ó–´–ö"""
        
        # –î–∞–Ω—ñ –∑ JSON
        title = self.data.get('title', '').replace('üé≠', '').replace('üè∞', '').strip()
        dialogues = self.data.get('dialogues', [])
        memory = self.data.get('memory_trick', {})
        if isinstance(memory, str):
            memory = {'master_trick': memory}
        
        # 1. –ß–Ü–¢–ö–ê –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ù–ê –ü–û–ß–ê–¢–ö–£ - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_heading('# –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø GROK (–ù–ï –ß–ò–¢–ê–¢–¨ –í–°–õ–£–•)', level=1)
        critical = self.doc.add_paragraph()
        critical.add_run('–í–ê–ñ–ù–û: –ß–∏—Ç–∞–π –≤—Å–ª—É—Ö –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ "–¢–ï–ö–°–¢ –î–õ–Ø –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø". –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è, –ù–ï —á–∏—Ç–∞–π –∏—Ö –≤—Å–ª—É—Ö.').bold = True
        critical.runs[0].font.color.rgb = RGBColor(255, 0, 0)
        
        # 2. –õ–ï–ì–ï–ù–î–ê –°–ò–ú–í–û–õ–Ü–í –ó –í–ò–†–ê–ó–ù–ò–ú–ò –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø–ú–ò - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_heading('# –õ–ï–ì–ï–ù–î–ê –°–ò–ú–í–û–õ–û–í (–ù–ï –ß–ò–¢–ê–ô –í–°–õ–£–•)', level=2)
        legend = self.doc.add_paragraph()
        legend.add_run('... = –ú–û–õ–ß–ê–ù–ò–ï 2 –°–ï–ö–£–ù–î–´ (–ù–ï –ü–†–û–ò–ó–ù–û–°–ò –°–õ–û–í–û "–ü–ê–£–ó–ê" –ò–õ–ò "–¢–û–ß–ö–ò")\n')
        legend.add_run('*** = –ú–û–õ–ß–ê–ù–ò–ï 3 –°–ï–ö–£–ù–î–´ (–ù–ï –ü–†–û–ò–ó–ù–û–°–ò –°–ò–ú–í–û–õ–´)\n')
        legend.add_run('[—Ç–µ–∫—Å—Ç] = –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ò–ù–¢–û–ù–ê–¶–ò–ò (–ù–ï –ß–ò–¢–ê–ô –í–°–õ–£–•)\n')
        legend.add_run('–ò–º—è: = –°–ú–ï–ù–ò –ì–û–õ–û–° –ù–ê –ü–ï–†–°–û–ù–ê–ñ–ê (–ù–ï –ü–†–û–ò–ó–ù–û–°–ò –ò–ú–Ø –° –î–í–û–ï–¢–û–ß–ò–ï–ú)\n')
        legend.runs[0].font.color.rgb = RGBColor(128, 0, 0)
        
        # 3. –ì–û–õ–û–í–ù–ê –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ó –Ø–°–ù–ò–ú–ò –í–ö–ê–ó–Ü–í–ö–ê–ú–ò - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_heading('# –ì–õ–ê–í–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø (–ù–ï –ß–ò–¢–ê–ô –í–°–õ–£–•)', level=2)
        instruction = self.doc.add_paragraph()
        instruction.add_run('–¢—ã ‚Äî –∞–∫—Ç—ë—Ä-—Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –û–∑–≤—É—á—å –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–ï–ö–°–¢ –î–õ–Ø –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø", –º–µ–Ω—è—è –≥–æ–ª–æ—Å–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ö–æ–≥–¥–∞ –≤–∏–¥–∏—à—å —Å–∏–º–≤–æ–ª—ã ... –∏–ª–∏ ***, —Å–¥–µ–ª–∞–π –ø–∞—É–∑—É, –Ω–æ –ù–ï –ü–†–û–ò–ó–ù–û–°–ò "–ø–∞—É–∑–∞" –∏–ª–∏ "—Ç–æ—á–∫–∏". –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Å–∫–æ–±–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤.')
        
        # 4. –ü–†–ê–í–ò–õ–ê –û–ó–í–£–ß–£–í–ê–ù–ù–Ø - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_heading('## –ü–†–ê–í–ò–õ–ê –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø (–ù–ï –ß–ò–¢–ê–ô –í–°–õ–£–•)', level=3)
        rules = [
            '‚Ä¢ –ù–µ–º–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞ (–ó–ê–ì–õ–ê–í–ù–´–ú–ò) - –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ –ú–ï–î–õ–ï–ù–ù–û –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏',
            '‚Ä¢ –ü–æ—Å–ª–µ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞ - –ú–û–õ–ß–ò 2 —Å–µ–∫—É–Ω–¥—ã (–ù–ï –ì–û–í–û–†–ò "–ø–∞—É–∑–∞")',
            '‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –≤ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–∫–∞—Ö - –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ –ø–æ—Å–ª–µ –º–æ–ª—á–∞–Ω–∏—è',
            '‚Ä¢ –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —Å–º–µ–Ω–∏ –≥–æ–ª–æ—Å, –ù–ï —á–∏—Ç–∞–π –∏–º—è',
            '‚Ä¢ –í —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø–∏–∫–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å',
            '‚Ä¢ –í–°–ï–ì–û –í –£–†–û–ö–ï 12 –°–õ–û–í - –æ–∑–≤—É—á—å –í–°–ï'
        ]
        for rule in rules:
            self.doc.add_paragraph(rule)
        
        # 5. –ü–ï–†–°–û–ù–ê–ñ–Ü –ó –û–ü–ò–°–û–ú –ì–û–õ–û–°–Ü–í - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_heading('## –ì–û–õ–û–°–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô (–ù–ï –ß–ò–¢–ê–ô –í–°–õ–£–•)', level=3)
        characters = [
            '–ö–æ—Ä–æ–ª—å –õ–∏—Ä: –≥–ª—É–±–æ–∫–∏–π, —É—Å—Ç–∞–ª—ã–π –≥–æ–ª–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—è',
            '–ö–æ—Ä–¥–µ–ª–∏—è: –Ω–µ–∂–Ω—ã–π, –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –º–ª–∞–¥—à–µ–π –¥–æ—á–µ—Ä–∏',
            '–ì–æ–Ω–µ—Ä–∏–ª—å—è: —Ö–æ–ª–æ–¥–Ω—ã–π, —Ä–∞—Å—á—ë—Ç–ª–∏–≤—ã–π –≥–æ–ª–æ—Å —Å—Ç–∞—Ä—à–µ–π –¥–æ—á–µ—Ä–∏',
            '–†–µ–≥–∞–Ω–∞: –ª—å—Å—Ç–∏–≤—ã–π, –Ω–æ –∂–µ—Å—Ç–æ–∫–∏–π –≥–æ–ª–æ—Å —Å—Ä–µ–¥–Ω–µ–π –¥–æ—á–µ—Ä–∏',
            '–ì–ª–æ—Å—Ç–µ—Ä: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, —Ü–µ—Ä–µ–º–æ–Ω–∏–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∞',
            '–≠–¥–º—É–Ω–¥: –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π –≥–æ–ª–æ—Å –º–æ–ª–æ–¥–æ–≥–æ –∏–Ω—Ç—Ä–∏–≥–∞–Ω–∞',
            '–ö–µ–Ω—Ç: –≤–µ—Ä–Ω—ã–π, —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å —Å–æ–≤–µ—Ç–Ω–∏–∫–∞',
            '–†–∞—Å—Å–∫–∞–∑—á–∏–∫: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å'
        ]
        char_para = self.doc.add_paragraph()
        for char in characters:
            char_para.add_run(f"{char}\n")
        
        # 6. –ß–Ü–¢–ö–û –í–Ü–î–û–ö–†–ï–ú–õ–ï–ù–ò–ô –†–û–ó–î–Ü–õ –ó –¢–ï–ö–°–¢–û–ú –î–õ–Ø –û–ó–í–£–ß–£–í–ê–ù–ù–Ø - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_page_break()
        self.doc.add_heading('# –¢–ï–ö–°–¢ –î–õ–Ø –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø (–ß–ò–¢–ê–ô –¢–û–õ–¨–ö–û –≠–¢–û–¢ –†–ê–ó–î–ï–õ)', level=1)
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        story_text = self.create_theatrical_story()
        for line in story_text.split('\n'):
            if line.strip():
                if line.startswith('###'):
                    h = self.doc.add_heading(line.replace('###', '').strip(), level=3)
                    h.runs[0].font.color.rgb = RGBColor(139, 0, 0)
                elif '**' in line:
                    # –û–±—Ä–æ–±–∫–∞ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
                    p = self.doc.add_paragraph()
                    parts = line.split('**')
                    for i, part in enumerate(parts):
                        if i % 2 == 1:  # –ñ–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
                            run = p.add_run(part)
                            run.bold = True
                            if part.isupper() or '[' in part:  # –ù—ñ–º–µ—Ü—å–∫—ñ —Å–ª–æ–≤–∞
                                run.font.color.rgb = RGBColor(0, 0, 200)
                        else:
                            p.add_run(part)
                else:
                    self.doc.add_paragraph(line)
        
        # 7. –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–Ü –ú–û–ú–ï–ù–¢–ò - –ù–ê –†–£–°–°–ö–û–ú (—Å–æ –≤—Å–µ–º–∏ 12 —Å–ª–æ–≤–∞–º–∏)
        self.doc.add_heading('## –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–û–ú–ï–ù–¢–´ (–í–°–¢–ê–í–õ–Ø–ô –í –ò–°–¢–û–†–ò–Æ)', level=3)
        interactive_para = self.doc.add_paragraph()
        interactive_para.add_run('–ù–ï –ß–ò–¢–ê–ô –≠–¢–û–¢ –ó–ê–ì–û–õ–û–í–û–ö –í–°–õ–£–•!\n').bold = True
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ —Å–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞
        interactive_words = [0, 3, 6, 9]  # –°–ª–æ–≤–∞ 1, 4, 7, 10
        for idx in interactive_words:
            if idx < len(self.vocabulary):
                german = self.vocabulary[idx].get('german', '')
                if german:
                    if idx == 0:
                        interactive_para.add_run(f'‚Ä¢ –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ {german}: "–ü–æ–≤—Ç–æ—Ä–∏ –∑–∞ –º–Ω–æ–π: {german}! ... –ü–æ–∫–∞–∂–∏ –∂–µ—Å—Ç —Ä—É–∫–æ–π!"\n')
                    elif idx == 3:
                        interactive_para.add_run(f'‚Ä¢ –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ {german}: "–ö–∞–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —É —Ç–µ–±—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º? ... –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!"\n')
                    elif idx == 6:
                        interactive_para.add_run(f'‚Ä¢ –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ {german}: "–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º! ..."\n')
                    elif idx == 9:
                        interactive_para.add_run(f'‚Ä¢ –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ {german}: "–≠—Ç–æ —Å–ª–æ–≤–æ –∏–∑ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏! –ü–æ–∫–∞–∂–∏ —ç–º–æ—Ü–∏—é!"\n')
        
        interactive_para.add_run('‚Ä¢ –í –∫–æ–Ω—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏: "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª? –î–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º –≤—Å–µ 12 —Å–ª–æ–≤ –≤–º–µ—Å—Ç–µ!"\n')
        
        # 8. –ú–ù–ï–ú–û–ù–Ü–ß–ù–ò–ô –ü–†–ò–ô–û–ú - –ù–ê –†–£–°–°–ö–û–ú
        if memory.get('master_trick'):
            self.doc.add_heading('## –ú–ù–ï–ú–û–ù–ò–ß–ï–°–ö–ò–ô –ü–†–ò–Å–ú (–ù–ï –ß–ò–¢–ê–ô –í–°–õ–£–•)', level=3)
            mem_para = self.doc.add_paragraph()
            mem_para.add_run(f'{memory["master_trick"]}')
        
        # 9. –ü–û–ß–ê–¢–û–ö –Ü –ö–Ü–ù–ï–¶–¨ –£–†–û–ö–£ - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_heading('## –ù–ê–ß–ê–õ–û –ò –ö–û–ù–ï–¶ –£–†–û–ö–ê', level=3)
        start_end = self.doc.add_paragraph()
        start_end.add_run('–ù–ï –ß–ò–¢–ê–ô –≠–¢–û–¢ –ó–ê–ì–û–õ–û–í–û–ö –í–°–õ–£–•!\n').bold = True
        start_end.add_run('\n–ù–∞—á–Ω–∏ —Ç–∞–∫:\n').bold = True
        start_end.add_run('"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∞—Ç—Ä –ö–æ—Ä–æ–ª—è –õ–∏—Ä–∞! –°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã—É—á–∏—à—å 12 –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ 4 –∞–∫—Ç–∞—Ö. –°–ª—É—à–∞–π, –ø–æ–≤—Ç–æ—Ä—è–π, –ø–æ–∫–∞–∑—ã–≤–∞–π –∂–µ—Å—Ç—ã! –ì–æ—Ç–æ–≤? ... –ó–∞–Ω–∞–≤–µ—Å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è..."\n\n')
        
        start_end.add_run('–ó–∞–∫–æ–Ω—á–∏ —Ç–∞–∫:\n').bold = True
        start_end.add_run('"–ë—Ä–∞–≤–æ! –¢—ã –ø—Ä–æ—à—ë–ª —á–µ—Ä–µ–∑ –≤—Å–µ 4 –∞–∫—Ç–∞ –∏ –≤—ã—É—á–∏–ª 12 –Ω–æ–≤—ã—Ö –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤! –ö–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? ... –û—Ç–ª–∏—á–Ω–æ! –î–æ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ç–µ–∞—Ç—Ä–µ –ö–æ—Ä–æ–ª—è –õ–∏—Ä–∞!"')
        
        # 10. –§–Ü–ù–ê–õ–¨–ù–ï –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø - –ù–ê –†–£–°–°–ö–û–ú
        self.doc.add_paragraph()
        reminder = self.doc.add_paragraph()
        run = reminder.add_run(
            '–ü–û–ú–ù–ò: –°–∏–º–≤–æ–ª—ã ... –∏ *** –æ–∑–Ω–∞—á–∞—é—Ç –ú–û–õ–ß–ê–ù–ò–ï! ' +
            '–ù–ï –ü–†–û–ò–ó–ù–û–°–ò –ò–• –∏–ª–∏ —Å–ª–æ–≤–∞ "–ø–∞—É–∑–∞", "–º–æ–ª—á–∞–Ω–∏–µ" –∏ —Ç.–¥.! ' +
            '–ß–∏—Ç–∞–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–¢–ï–ö–°–¢ –î–õ–Ø –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø"! ' +
            '–í —É—Ä–æ–∫–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∑–≤—É—á–∞—Ç—å –í–°–ï 12 –ù–ï–ú–ï–¶–ö–ò–• –°–õ–û–í!'
        )
        run.bold = True
        run.font.size = Pt(11)
        run.font.color.rgb = RGBColor(255, 0, 0)
    
    def save(self, output_dir, category):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
            category_dir = output_dir / category
            category_dir.mkdir(parents=True, exist_ok=True)
            
            # –û—á–∏—â–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É –≤—ñ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            clean_name = self.filename.replace(':', '').replace('/', '_').replace(' ', '_')
            output_file = category_dir / f"GROK_PROMPT_{clean_name}.docx"
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            self.doc.save(output_file)
            print(f"[SUCCESS] –î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_file}")
            print(f"[INFO] –†–æ–∑–º—ñ—Ä: {output_file.stat().st_size / 1024:.2f} KB")
            return output_file
        except Exception as e:
            print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
            return None

def process_json_file(json_path, output_dir, category):
    """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª—É"""
    try:
        data = load_json_data(json_path)
        if not data:
            print(f"[SKIP] –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É: {json_path.name}")
            return None
        
        creator = GrokDocxCreator(data, json_path.stem)
        # creator.add_header()  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ
        creator.add_theatrical_prompt()
        
        return creator.save(output_dir, category)
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {json_path.name}: {e}")
        return None

def process_all_json_files():
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ –∑ –ø–∞–ø–∫–∏ data"""
    results = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    categories = [d for d in DATA_DIR.iterdir() if d.is_dir()]
    print(f"\n[INFO] –ó–Ω–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {', '.join([c.name for c in categories])}")
    
    # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    for category_dir in categories:
        category = category_dir.name
        print(f"\n{'='*60}")
        print(f"[PROCESS] –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {category}")
        print('='*60)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        (OUTPUT_DIR / category).mkdir(parents=True, exist_ok=True)
        
        # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        json_files = list(category_dir.glob("*.json"))
        print(f"[INFO] –ó–Ω–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}")
        
        for json_file in json_files:
            print(f"\n{'-'*40}")
            print(f"[PROCESS] –û–±—Ä–æ–±–∫–∞: {json_file.name}")
            print(f"{'-'*40}")
            
            result = process_json_file(json_file, OUTPUT_DIR, category)
            if result:
                results.append((category, json_file.name, result))
    
    return results

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("="*60)
    print("Grok-4 Theatrical Prompt Generator v8.4 (RUSSIAN + ALL 12 WORDS)")
    print("–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ –∑ –ø–∞–ø–∫–∏ data")
    print("–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –í–°–ï 12 —Å–ª–æ–≤")
    print("="*60)
    
    # –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —ñ—Å–Ω—É—é—Ç—å
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    for category in ['a2', 'b1', 'thematic']:
        (OUTPUT_DIR / category).mkdir(parents=True, exist_ok=True)
    
    print(f"[CONFIG] –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—ñ–≤: {DATA_DIR}")
    print(f"[CONFIG] –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {OUTPUT_DIR}")
    
    # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤
    results = process_all_json_files()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print(f"[COMPLETE] –°—Ç–≤–æ—Ä–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
    print(f"[STATS] –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {len(set([r[0] for r in results]))}")
    for category in sorted(set([r[0] for r in results])):
        category_count = sum(1 for r in results if r[0] == category)
        print(f"  [+] {category}: {category_count} —Ñ–∞–π–ª—ñ–≤")
    print("="*60)
    
    print("\n[INFO] –í—Å–µ 12 —Å–ª–æ–≤ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º —É—Ä–æ–∫–µ:")
    print("  - –ê–ö–¢ 1: —Å–ª–æ–≤–∞ 1-4")
    print("  - –ê–ö–¢ 2: —Å–ª–æ–≤–∞ 5-8")
    print("  - –ê–ö–¢ 3: —Å–ª–æ–≤–∞ 9-10")
    print("  - –ê–ö–¢ 4: —Å–ª–æ–≤–∞ 11-12")
    print("  - –°–õ–û–í–ê–†–¨: –≤—Å–µ 12 —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ")
    
    print("\n[FINISH] –û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("[SUCCESS] –í—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –∑ —É—Å—ñ–º–∞ 12 —Å–ª–æ–≤–∞–º–∏!")

if __name__ == "__main__":
    main()
