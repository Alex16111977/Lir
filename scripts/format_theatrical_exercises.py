#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∏—Ö –≤–ø—Ä–∞–≤
–ó–∞–º—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –∑ –ø–æ–ª–µ–º content
"""

import json
import re
from pathlib import Path

def format_theatrical_exercise(exercise_text):
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—É –≤–ø—Ä–∞–≤—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    """
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ–ø—É—Å–∫–∏
    gaps = re.findall(r'___ \(([^)]+)\)', exercise_text)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–ø—Ä–∞–≤–∏
    exercise = {
        "title": "üé≠ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ñ–π –ø–æ—Å—Ç–∞–Ω–æ–≤—Ü—ñ",
        "type": "theatrical_gaps",
        "content": exercise_text,
        "gaps": gaps,
        "instruction": f"–ó–∞–ø–æ–≤–Ω—ñ—Ç—å {len(gaps)} –ø—Ä–æ–ø—É—Å–∫—ñ–≤ —É —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ. –ü—ñ–¥–∫–∞–∑–∫–∏ –≤ –¥—É–∂–∫–∞—Ö –¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤–∞–º."
    }
    
    return exercise

def process_json_files(base_path='F:\\AiKlientBank\\Lir\\data'):
    """
    –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ JSON —Ñ–∞–π–ª–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –≤–ø—Ä–∞–≤–∏
    """
    base_dir = Path(base_path)
    
    # –ü–∞–ø–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    folders = ['b1', 'a2', 'thematic']
    
    total_processed = 0
    total_updated = 0
    
    for folder in folders:
        folder_path = base_dir / folder
        if not folder_path.exists():
            print(f"[!] –ü–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î: {folder_path}")
            continue
            
        print(f"\n[=] –û–±—Ä–æ–±–∫–∞ –ø–∞–ø–∫–∏: {folder}")
        print("=" * 50)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ JSON —Ñ–∞–π–ª–∏
        json_files = list(folder_path.glob('**/*.json'))
        
        for json_file in json_files:
            total_processed += 1
            print(f"\n[{total_processed}] –§–∞–π–ª: {json_file.name}")
            
            try:
                # –ß–∏—Ç–∞—î–º–æ JSON
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ exercise —î —Ä—è–¥–∫–æ–º (—Ç–µ–∫—Å—Ç–æ–º)
                if 'exercise' in data and isinstance(data['exercise'], str):
                    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    exercise_text = data['exercise']
                    data['exercise'] = format_theatrical_exercise(exercise_text)
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π JSON
                    with open(json_file, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    
                    print(f"  [OK] –í–ø—Ä–∞–≤—É –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ!")
                    print(f"  –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫—ñ–≤: {len(data['exercise']['gaps'])}")
                    total_updated += 1
                else:
                    print(f"  [=] –í–ø—Ä–∞–≤–∞ –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è")
                    
            except Exception as e:
                print(f"  [ERROR] –ü–æ–º–∏–ª–∫–∞: {e}")
                import traceback
                traceback.print_exc()
    
    print("\n" + "=" * 50)
    print(f"[–†–ï–ó–£–õ–¨–¢–ê–¢]")
    print(f"  –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {total_processed}")
    print(f"  –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ: {total_updated}")
    print(f"  –ë–µ–∑ –∑–º—ñ–Ω: {total_processed - total_updated}")

def main():
    print("[START] –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∏—Ö –≤–ø—Ä–∞–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    print("=" * 50)
    
    process_json_files()
    
    print("\n[DONE] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == '__main__':
    main()
